#!/bin/zsh

# This file contains utilities related to Android developement
# but to to setting up the environnment and working with the Platfom.
# android_env is the file containing environmment related function

# Edit this file
echo "Sourcing android_utils"

alias pidcat=~/.dotfiles/android/pidcat.py

function adbd() {
    # Prompt which device to use before running the adb command
    local filter=""
    if [[ "$1" == "-f" ]]; then
        shift
        filter="--query $1 --select-1"
        shift
    fi

    local devices=""
    for serial in $(adb devices -l | tail -n+2 | awk '{print$1}') ; 
    do
        devices="$devices\n$serial"
        devices="$devices $(adb -s $serial shell 'echo `getprop ro.serialno` `getprop ro.product.device` `getprop ro.product.model`' 2>&1)"
    done
    
    local serial=$(echo $devices |  fzf $(echo $filter) --bind 'focus:execute-silent(adb -s {1} shell input keyevent KEYCODE_NOTIFICATION KEYCODE_ESCAPE)'| awk '{print$1}')

    adb -s $serial shell input keyevent KEYCODE_ESCAPE

    if [ $# -gt 0 ]; then
        adb -s "$serial" "$@"
    else
        echo "$serial"
    fi
}

function adba() {
    local filter=""
    if [[ "$1" = "-f" ]]; then
        filter="$2"
        shift
        shift
    fi

    if [[ $# -lt 1 ]]; then
        echo "No args given for ADB"
        return 1
    fi

    devices=$(adb devices -l | tail -n+2)
    [[ -n $filter ]] && devices=$(echo "$devices" | grep "$filter")
    echo "$devices"
    echo "$devices" | while read current; do
        if [[ -n $current ]]; then
            echo "$current"
            serial=$(echo "$current" | awk '{print$1}')
            adb </dev/null -s "$serial" "$@"
        fi
    done
}

# Kill ADB servers
function adbk() {
    processes=$(pgrep -a adb | tr ':' ' ')
    [[ -z $processes ]] && return
    ports=$(echo "$processes" | awk '{if ($5) print$5}')
    [[ -z $ports ]] && ports="5037"
    echo $ports | while read port; do
        echo "Killing server on port $port"
        adb -P "$port" kill-server
    done

    sleep 1
    processids=$(pgrep adb | awk '{print$1}')
    [[ -z $processids ]] && {
        echo "All ADB servers killed"
        return
    }
    echo "$processids" | while read pid; do
        echo "Killing leftover adb process $pid"
        kill -9 "$pid"
    done
}

function avd() {
    local id

    # List the available AVD, and prompt which one to use
    avds=$(emulator -list-avds)
    [[ -z $avds ]] && return 1
    echo "$avds"
    read -r "a?AVD:"
    echo
    [[ -z $a ]] && return
    id=$(echo "$avds" | grep "$a")
    [[ -z $id ]] && {
        echo "No AVD matching $a. Aborting."
        return 1
    }
    if [[ $(echo "$id" | wc -l) -gt 1 ]]; then
        echo "$id"
        echo "More than one device mathing $id. Aborting."
        return 1
    fi
    emulator "@$id" "$@" &
    local retcode=$?
    disown
    return $retcode
}

function ads() {
    # Dump system info
    adb shell dumpsys "$@" | less -F
}

function akillapps() {
    # Kill all user apps
    adb shell ps -A | grep u0 | grep -v systemui | awk '{print$2}' | xargs -I{} adb shell kill {}
}

function ash {
    # ADB shell
    adb shell "$@"
}

alias aa=adbserial
function adbserial() {
    # Show a list the available device to select and set to the ANDROID_SERIAL
    # variable.
    # If an argument is given, the line matching the argument will be used without
    # showing a prompt.
    local filter=""
    local fastboot
    local use_pontis
    while [[ $# -gt 0 ]]; do
        case $1 in
        -h)
            echo "Usage: fastboot [flags] [filter]\n \
flags:
    -h : help.\n\
    -f : fastboot.\n\
    -p : use pontis."
            return 0
            ;;
        -f)
            fastboot=true
            shift
            ;;
        -p)
            use_pontis=true
            shift
            ;;
        *)
            filter="-f $1"
            shift
            ;;
        esac
    done

    if [[ $use_pontis == true ]]; then
        if [[ $fastboot == true ]]; then
            serial=$(pontis devices | grep fastboot | fzf --height=5 | awk '{print$2}')
        else
            serial="$(pontis devices | grep ADB | fzf --height=5 | awk '{print$6}')"
            [[ -n $serial ]] && serial=localhost:$serial
        fi
    else
        local serial
        serial=$(adbd $(echo "$filter"))
    fi

    if [[ -z $serial ]]; then
        unset ANDROID_SERIAL
        unset ANDROID_SERIAL_PRODUCT
    else
        export ANDROID_SERIAL=$serial
        export ANDROID_SERIAL_PRODUCT=$(aproductname)
    fi
}

function aproductname() {
    productname=$(adb shell getprop ro.product.name)
    [[ -z $productname ]] && productname=$(adb shell getprop ro.productname)
    echo $productname
}

function adbsync() {
    adb root && adb remount -R && adb wait-for-device root && adb remount && adb shell stop && adb sync && adb shell start
}

function apxtodp {
    # Convert px to dp for the connected device
    [[ -z $1 ]] && return 1
    density=$(adb shell wm density | cut -d':' -f2)
    ((res = ($1 * 160) / $density))
    echo $res
}

function adptopx {
    # Convert dp to px for the connected device
    [[ -z $1 ]] && return 1
    density=$(adb shell wm density | cut -d':' -f2)
    ((px = ($1 * $density) / 160.0))
    echo $px
}

function askipwizard() {
    # Skip the Setup wizard
    adb root && adb shell am start -a com.android.setupwizard.FOUR_CORNER_EXIT
}

function anosleep() {
    # Set the Screen timeout to 450 seconds
    adb shell settings put system screen_off_timeout 450000
}

function adebugapp() {
    # Usage adebugapp [-p] <pattern>
    # Calls adb shell am set-debug-app on the package matching pattern
    # -p for --persitent

    local persitent=
    if [[ $1 == "-p" ]]; then
        persitent="--persistent"
        shift
    fi

    local pkgs
    if [[ -z $1 ]]; then
        pkgs=$(apkg)
    else
        pkgs=$(adb shell pm list packages -3 --user 0 | grep $1 | cut -f2 -d':')
    fi

    if [[ $(echo $pkgs | wc -l) != 1 ]]; then
        echo "0 or more than 1 package mathing $1"
        echo $pkgs
        return 1
    fi

    echo "Debugging $pkgs"
    adb shell am set-debug-app -w $pkgs $persistent
}

function apic {
    local filename=screen-$(date "+%Y%m%d_%H-%M-%S").png
    local out="/storage/emulated/0/Pictures/Screenshots/$filename"
    adb shell screencap "$out"
    adlpic ~/D/
    echo "Screenshot saved at ~/D/$filename"
    eog ~/D/"$filename"
}

function adll {
    # Download the latest file in the provided folder
    [[ $1 == "-h" ]] && {
        echo """Download the latest file in the folder"""
        return 0
    }
    dir="$1"
    shift
    local out=""
    if [[ -n $1 ]]; then
        out="$1"
    else
        out="./"
    fi
    adb pull "$dir/$(adb shell ls -t "$dir" | grep -v / | head -n1)" $out
}

function astopstart() {
    # Restart the system server
    adb shell stop && adb shell start
}

function aps() {
    # Find an Android process by name
    local grep_str=""
    local pid=false
    local verbose=false
    local uid=false
    local ps_options=()

    while [[ -n $1 ]]; do
        case $1 in
        -p)
            pid=true
            shift
            ;;
        -v)
            verbose=true
            shift
            ;;
        --uid | -u)
            uid=true
            ps_options+=(-O UID)
            shift
            ;;
        *)
            grep_str+=$1
            shift
            ;;
        esac
    done

    if [[ -z $grep_str ]]; then
        local awk_index=9
        if [[ $pid == true ]]; then
            awk_index=2
        fi
        adb shell ps ${ps_options[@]} | fzf --header-lines 1 --layout=reverse --height=30% --multi --exact | awk "{print\$$awk_index}"
        return 0
    fi
    if [[ $verbose == true ]]; then
        adb shell ps -o pid -o name | grep "$grep_str"
    elif [[ $pid == true ]]; then
        adb shell ps -o name -o pid | grep "$grep_str" | awk '{print$2}'
    elif [[ -n $grep_str ]]; then
        adb shell ps -o name | grep "$grep_str"
    fi
}

function apkg() {
    # List installed package and their uid
    local packages=$(adb shell pm list package -U "$1" | sed 's/\(package\|uid\)://gi')
    if [[ $(echo $packages | wc -l) -eq 1 ]]; then
        echo $packages | awk '{print$1}'
        return 0
    fi

    echo $packages | column -t -N "PACKAGE, UID" | fzf --header-lines 1 --reverse --height 20 |
        awk '{print$1}'
}

function akill() {
    # Kill android processes
    local positionals=()
    local filter=()
    while [[ -n $1 ]]; do
        case $1 in
        -*)
            positionals+=($1)
            shift
            ;;
        *)
            filter+=($1)
            shift
            ;;
        esac
    done
    processes=$(aps -p ${filter[@]})
    [[ -n $processes ]] && adb shell kill "${positionals[@]}" $(echo $processes)
}

function amstart() {
    # Pick and start an activity
    pkg=$(apkg "$@")
    [[ -n $pkg ]] || return 1
    activity=$(adb shell dumpsys package | grep "$pkg/" | awk '{print$2}' | sort -u | fzf --select-1 --query="$*")
    [[ -n $activity ]] || return 1
    echo "adb shell am start -S -n $activity"
    adb shell am start -S -n "$activity"
}

function atouch {
    # Show Touches
    adb shell content insert --uri content://settings/system --bind name:s:show_touches --bind value:i:"$1"
}

# Dowload from devices funcitons
function adlvid {
    # Download the latest video on device
    adll "/storage/emulated/0/Movies" "$@"
}

function adlpic {
    # Download the latest screenshot on device
    adll "/storage/emulated/0/Pictures/Screenshots" "$@"
}

function ascreen {
    # Record the screen
    screen_record_pid=
    out="."
    filename=""
    dir="/storage/emulated/0/Movies"
    recording=

    while [[ -n $1 ]]; do
        case $1 in
        -d)
            out=$2
            [[ -d $out ]] || return 1
            shift
            shift
            ;;
        -f)
            filename="$2.mp4"
            shift
            shift
            ;;
        esac
    done

    [[ -z $filename ]] && filename="screen-$(date "+%Y%m%d_%H-%M-%S").mp4"
    file="$dir/$filename"

    TRAPINT() {
        recording=
        unfunction TRAPINT
        if [[ $screen_record_pid -gt 0 ]]; then
            kill -INT $screen_record_pid
        fi
        sleep 0.5
        adb pull $file $out
        echo "Screen record saved in $out/$filename"
        return 0
    }

    # enable touches
    adb shell content insert --uri content://settings/system --bind name:s:show_touches --bind value:i:1

    echo "Starting recording on device"
    recording="true"
    adb shell "screenrecord $file"
    # device_record_pid=$(adb shell "screenrecord $file & ; echo \$! " )
    screen_record_pid=$(echo $!)
    echo
}

function logcat() {
    local format="brief time color"
    local args=()
    local positionals=()
    while [[ -n $1 ]]; do
        case $1 in
        error)
            args+=("*:E")
            shift
            ;;
        warn)
            args+=("*:W")
            shift
            ;;
        debug)
            args+=("*:D")
            shift
            ;;
        all)
            args+=(-b all)
            shift
            ;;
        -c)
            adb logcat -c && echo "Logcat cleared"
            return
            ;;
        *)
            positionals+=($1)
            shift
            ;;
        esac
    done
    logcat_outfile=$(mktemp --tmpdir logcat-$(date "+%Y-%m-%d_%H-%M-%S")-XXX.log)
    echo "Saving to \$logcat_outfile $logcat_outfile" >&2
    adb logcat -v "$format" "${args[@]}" "${positionals[@]}" | tee $logcat_outfile | less --ignore-case --quit-if-one-screen -R +F
}

function adebugenable() {
    # Enable JDWP debugging
    adb shell setprop persist.debug.dalvik.vm.jdwp.enabled 1
    adb reboot
}

function sjava() {
    # Search Java file
    ag --java --ignore "*test*" -H -C 5 $1 | bat -l java --pager "less +/$1 -R -n -i" --style="grid"
}

function sbp() {
    # Search bp and mk files
    ag -G ".*\.(bp|mk)" $1 -H -C 5 | bat -l js --pager "less +/$1 -R"
}

function aospformat() {
    # Format code the the aosp format
    git diff -U0 HEAD^ | $(gettop)/external/google-java-format/scripts/google-java-format-diff.py -a -p1 -i
}

function asettings() {
    # List all Android settings
    cat <(adb shell settings list system) <(adb shell settings list secure) <(adb shell settings list global) | sort -u | fzf
}

function aanr() {
    # Make all ANR alert visible
    local value=${1:-1}
    adb shell settings put secure show_all_anrs $value
    adb shell settings put secure anr_show_background $value

    adb shell settings list secure | grep --color=no anr
}

function aselinuxaudit() {
    adb pull /sys/fs/selinux/policy
    adb logcat -b events -d | audit2allow -p policy
}

function android_generate_compile_commands() {
    export SOONG_GEN_COMPDB=1
    export SOONG_GEN_COMPDB_DEBUG=1
    export SOONG_COLLECT_JAVA_DEPS=1
    export SOONG_LINK_COMPDB_TO=$ANDROID_HOST_OUT
}

# Enable native verbose loging
alias alogv='sed -i "s;^\(//\s*\)\?\(#define LOG_NDEBUG 0\);\2;g" $(ag -r "#define LOG_NDEBUG 0"  -l)'
# Disable native verbose loging
alias alogvn='sed -i "s;^\(//\s*\)\?\(#define LOG_NDEBUG 0\);// \2;g" $(ag -r "#define LOG_NDEBUG 0"  -l)'
