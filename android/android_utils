#!/bin/zsh

# This file contains utilities related to Android developement 
# but to to setting up the environnment and working with the Platfom. 
# android_env is the file containing environmment related function

# Edit this file
echo "Sourcing android_utils"

alias pidcat=~/.dotfiles/android/pidcat.py

function adbd() {
    # Prompt which device to use before running the adb command
    local filter=""
    if [[ "$1" == "-f" ]] ; then
        shift;
        filter="$1"; shift
    fi

    local devices=$(adb devices -l | awk '{print $1 "\t" $4 "\t" $5}')
    header="$devices"
    devices=$(echo "$devices" | tail -n +2)
    count=$(( $(echo "$devices" | wc -l) - 1 ))
    sel=1
    serial=-1
    if [[ -n $filter ]] ; then
        serial=$(echo "$devices" | grep "$filter" | awk '{print$1}')
    else
        if [ $count -gt 1 ] ; then
            echo $( echo "$header" | head -n1 ) >&2
            echo "$devices" | >&2 grep -n '^'
            read sel"?Device: "
        fi
        if [[ -z $sel  ]] ; then
            return 0;
        fi
        serial=$(echo "$devices" | awk "NR==$sel {print\$1}")
    fi

    if [ $#  -gt 0 ] ; then
        adb -s "$serial" "$@"
    else
        echo "$serial"
    fi
}

function adba() {
    local filter=""
    if  [[ "$1" = "-f" ]] ; then
        filter="$2"; shift; shift;
    fi

    if [[ $# -lt 1 ]] ; then 
      echo "No args given for ADB";
       return 1; 
    fi

    devices=$(adb devices -l | tail -n+2)
    [[ -n $filter ]] && devices=$(echo "$devices" | grep "$filter")
    echo "$devices"
    echo "$devices" | while read current ; do
        if [[ -n $current ]] ; then
            echo "$current"
            serial=$(echo "$current" | awk '{print$1}')
            adb </dev/null -s "$serial" "$@"
        fi
    done
}

# Kill ADB servers
function adbk() {
    processes=$(pgrep -a adb | tr ':' ' ')
    [[ -z $processes ]] && return
    ports=$(echo "$processes" | awk '{if ($5) print$5}')
    [[ -z $ports ]] && ports="5037"
    echo $ports | while read port; do 
        echo "Killing server on port $port"
        adb -P "$port" kill-server
    done

    sleep 1;
    processids=$(pgrep adb | awk '{print$1}')
    [[ -z $processids ]] && {  echo "All ADB servers killed"; return; }
    echo "$processids" | while read pid; do
        echo "Killing leftover adb process $pid"
        kill -9 "$pid"
    done
}

function avd() {
    local id;

    # List the available AVD, and prompt which one to use
    avds=$(emulator -list-avds)
    [[ -z $avds ]] && return 1
    echo "$avds"
    read -r "a?AVD:";
    echo
    [[ -z $a ]] && return
    id=$(echo "$avds" | grep "$a")
    [[ -z $id ]] && { echo "No AVD matching $a. Aborting."; return 1; }
    if [[ $(echo "$id" | wc -l) -gt 1 ]] ; then
        echo "$id"
        echo "More than one device mathing $id. Aborting."
        return 1
    fi
    emulator "@$id" "$@" &
    local retcode=$?
    disown
    return $retcode
}

function ads() {
    # Dump system info
    adb shell dumpsys "$@" | less -F
}

function akillapps() {
    # Kill all user apps
    adb shell ps -A | grep u0 | grep -v systemui | awk '{print$2}' | xargs -I{} adb shell kill {}
}

function ash {
    # ADB shell
    adb shell "$@"
}

alias aa=adbserial
function adbserial() {
    # Show a list the available device to select and set to the ANDROID_SERIAL 
    # variable.
    # If an argument is given, the line matching the argument will be used without
    # showing a prompt.
    filter=""
    if [[ $# -gt 0 ]] ; then
        filter="-f $1"
        shift
    fi
    serial=$(adbd $(echo "$filter"))
    if [[ -z $serial ]] ; then
        unset ANDROID_SERIAL
        unset ANDROID_SERIAL_PRODUCT
    else
        export ANDROID_SERIAL=$serial
        export ANDROID_SERIAL_PRODUCT=$(aproductname)
    fi
}

function aproductname() {
    productname=$(adb shell getprop ro.product.name)
    [[ -z $productname ]] && productname=$(adb shell getprop ro.productname)
    echo $productname
}

function apxtodp {
    # Convert px to dp for the connected device
    [[ -z $1 ]] && return 1;
    density=$(adb shell wm density | cut -d':' -f2)
    (( res = ($1 * 160 ) /  $density ));
    echo $res
}

function adptopx {
    # Convert dp to px for the connected device
    [[ -z $1 ]] && return 1;
    density=$(adb shell wm density | cut -d':' -f2)
    (( px = ($1 * $density ) /  160.0 ));
    echo $px
}

function askipwizard() {
    # Skip the Setup wizard
    adb root && adb shell am start -a com.android.setupwizard.FOUR_CORNER_EXIT
}

function anosleep() {
    # Set the Screen timeout to 450 seconds
    adb shell settings put system screen_off_timeout 450000
}

function adebugapp() {
    # Usage adebugapp [-p] <pattern>
    # Calls adb shell am set-debug-app on the package matching pattern
    # -p for --persitent

    local persitent=
    if [[ $1 == "-p" ]] ; then
        persitent="--persistent"
        shift
    fi


    local pkgs;
    if [[ -z $1 ]] ; then
	    pkgs=$(apkg)
    else
        pkgs=$(adb shell pm list packages -3 --user 0 | grep $1 | cut -f2 -d':')
    fi

    if [[ `echo $pkgs | wc -l` != 1 ]] ; then
        echo "0 or more than 1 package mathing $1"
        echo $pkgs
        return 1
    fi

    echo "Debugging $pkgs"
    adb shell am set-debug-app -w $pkgs $persistent
}

function apic {
    local filename=screen-$(date  "+%Y%m%d_%H-%M-%S").png
    local out="/storage/emulated/0/Pictures/Screenshots/$filename"
    adb shell screencap "$out"
    adlpic ~/D/
    echo "Screenshot saved at ~/D/$filename"
    eog ~/D/"$filename"
}

function adll {
    # Download the latest file in the provided folder
    [[ $1 == "-h" ]] && { echo """Download the latest file in the folder"""; return 0; }
    dir="$1"; shift
    local out=""
    if [[ -n $1 ]] ; then
        out="$1"
    else
        out="./"
    fi
    adb pull "$dir/$(adb shell ls -t "$dir" | grep -v / | head -n1)" $out
}

function astopstart() {
    # Restart the system server
    adb shell stop && adb shell start;
}

function aps() {
    # Find an Android process by name
    grep_str=""
    pid=false
    verbose=false
    [[ "$1" == "-p" ]] && { pid=true; shift; }
    [[ "$1" == "-v" ]] && { verbose=true; shift; }
    [[ -n "$1" ]] && grep_str="$1"

    if [[ -z $grep_str ]] ; then
        local awk_index=9
        if [[ $pid == true ]] ; then 
            awk_index=2
        fi
        adb shell ps | fzf --header-lines 1 --layout=reverse --height=30% | awk "{print\$$awk_index}"
        return 0;
    fi
    if [[ $verbose == true ]] ; then 
        adb shell ps -o pid -o name | grep "$grep_str"
    elif [[ $pid == true ]] ; then 
        adb shell ps -o name -o pid | grep "$grep_str" | awk '{print$2}'
    elif [[ -n $grep_str ]] ; then
        adb shell ps -o name | grep "$grep_str"
    fi
}

function apkg() {
	# List installed package and their uid
	adb shell pm list package -U "$@"| \
		sed 's/\(package\|uid\)://gi' | \
		column -t -N "PACKAGE, UID" | \
		fzf --header-lines 1 --reverse --height 20 | \
		awk '{print$1}'
}

function atouch {
    # Show Touches
    adb shell content insert --uri content://settings/system --bind name:s:show_touches --bind value:i:"$1"
}

# Dowload from devices funcitons
function adlvid {
    # Download the latest video on device
    adll "/storage/emulated/0/Movies" "$@"
}

function adlpic {
    # Download the latest screenshot on device
    adll "/storage/emulated/0/Pictures/Screenshots" "$@"
}

function ascreen {
    # Record the screen
    screen_record_pid=
    out="."
    filename=""
    dir="/storage/emulated/0/Movies"
    recording=

    while [[ -n $1 ]] ; do 
        case $1 in
            -d)
                out=$2;
                [[ -d $out ]] || return 1
                shift; shift
                ;;
            -f)
                filename="$2.mp4"
                shift; shift
                ;;
        esac
    done
    
    [[ -z $filename ]] && filename="screen-$(date  "+%Y%m%d_%H-%M-%S").mp4"
    file="$dir/$filename"

    TRAPINT() {
        recording=
        unfunction TRAPINT
        if [[ $screen_record_pid -gt 0 ]] ; then
            kill -INT $screen_record_pid
        fi
        sleep 0.5
        adb pull $file $out
        echo "Screen record saved in $out/$filename"
        return 0
    }

    # enable touches
    adb shell content insert --uri content://settings/system --bind name:s:show_touches --bind value:i:1
    
    echo "Starting recording on device"
    recording="true"
    adb shell "screenrecord $file"
    # device_record_pid=$(adb shell "screenrecord $file & ; echo \$! " )
    screen_record_pid=$(echo $!)
    echo
}

function logcat() {
    local format="brief color"
    local args=()
    while [[ -n $1 ]] ; do
        case $1 in
            error)
                adb logcat -v $format -b all -s "*:E"
                shift
                return
                ;;
            warn)
                adb logcat -v $format -b all -s "*:W"
                shift
                return
                ;;
            all)
                args+=(-b all)
                shift
                ;;
        esac
    done

    adb logcat -v $format ${args[@]} "$@"
}

function adebugenable() {
    # Enable JDWP debugging
	adb shell setprop persist.debug.dalvik.vm.jdwp.enabled 1
	adb reboot
}

function sjava() {
    # Search Java file
    ag --java --ignore "*test*" -H -C 5 $1 | bat -l java --pager "less +/$1 -R"
}

function sbp() {
    # Search bp and mk files
    ag -G ".*\.(bp|mk)" $1 -H -C 5 | bat -l js --pager "less +/$1 -R"
}
